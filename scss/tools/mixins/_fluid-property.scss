// Globals
@use "sass:math";
@use "../variables/type";
@use "../variables/logical-properties" as logical;
@use "../functions/stripUnit";
@use "../functions/calcInterpolation";
@use "breakpoint";
@use "property";

@mixin fluid-property(
  $property,
  $min-value: type.$illusion-fluid-property-min-value,
  $max-value: type.$illusion-fluid-property-max-value,
  $min-screen: type.$illusion-fluid-property-min-screen,
  $max-screen: type.$illusion-fluid-property-max-screen
) {
  & {
    @if logical.$illusion-logical-properties {
      @if math.compatible($min-screen, $max-screen) and math.compatible($min-value, $max-value) {
        @include property.property("#{$property}", clamp(#{$min-value}, calc(#{$min-value} + #{stripUnit.stripUnit($max-value - $min-value)} * ((100vw - #{$min-screen}) / #{stripUnit.stripUnit($max-screen - $min-screen)} * #{math.div($max-screen, $min-screen)})), #{$max-value}));
      }
    } @else {
      @if math.compatible($min-screen, $max-screen) and math.compatible($min-value, $max-value) {
        #{$property}: $min-value;

        @if (type.$illusion-fluid-property-clamp == false) {
          @include breakpoint.breakpoint($min-screen) {
            #{$property}: calcInterpolation.calcInterpolation($min-screen, $min-value, $max-screen, $max-value);
          }
        }

        @include breakpoint.breakpoint($max-screen) {
          #{$property}: $max-value;
        }

        @if (type.$illusion-fluid-property-clamp != false) {
          @supports (top: clamp(1em, 1vw, 2em)) {
            #{$property}: clamp(#{$min-value}, calc(#{$min-value} + #{stripUnit.stripUnit($max-value - $min-value)} * ((100vw - #{$min-screen}) / #{stripUnit.stripUnit($max-screen - $min-screen)} * #{math.div($max-screen, $min-screen)})), #{$max-value});
          }
        }
      }
    }
  }
}
