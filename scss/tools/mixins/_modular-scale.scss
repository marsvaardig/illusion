// Modular scale
// ==========================================================================
// Responsive spacing items apart with an old browser fallback
// This is a responsive spacer

@mixin ms(
  $property,
  $amount: 0,
  $multiplier: 1,
  $subtractFrom: false
) {
  // Get default value from map
  $ms-amount: map-get($illusion-ms-sizes, $amount);
  // Support for non default values
  @if ($ms-amount == null) {
    $ms-amount: $amount;
  }
  // Support for non default behavior
  @if ($multiplier == false) {
    $ms-amount: $amount;
  }
    // Apply multiplier if applicable
  @else if ($multiplier != 1) {
    $ms-amount: map-get($illusion-ms-sizes, $amount) * $multiplier;
  }

  // Logical properties?
  @if $illusion-logical-properties {
    @if ($subtractFrom) {
      & {
        @include property("#{$property}", calc(#{$subtractFrom} - (var(--#{$illusion-css-variables-prefix}spacing) * #{$ms-amount})));
      }
    } @else {
      & {
        @include property("#{$property}", calc(var(--#{$illusion-css-variables-prefix}spacing) * #{$ms-amount}));
      }
    }
  } @else {
    // Default
    @if ($subtractFrom) {
      & {
        #{$property}: calc(#{$subtractFrom} - (#{ms(1, rem)} * #{$ms-amount * $illusion-fallback-amount}));
      }
    } @else {
      & {
        #{$property}: calc(#{ms(1, rem)} * #{$ms-amount * $illusion-fallback-amount});
      }
    }
    // Fallback
    @if ($illusion-fallback == false) {
      @supports (--css: variables) {
        @if ($subtractFrom) {
          & {
            #{$property}: calc(#{$subtractFrom} - (var(--#{$illusion-css-variables-prefix}spacing) * #{$ms-amount}));
          }
        } @else {
          & {
            #{$property}: calc(var(--#{$illusion-css-variables-prefix}spacing) * #{$ms-amount});
          }
        }
      }
    }
  }
}
