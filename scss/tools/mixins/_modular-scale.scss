// Globals
@use "sass:map";
@use "../variables/fallback";
@use "../variables/custom-properties" as vars;
@use "../variables/modular-scale";
@use "../variables/logical-properties" as logical;
@use "../functions/modularScale" as fms;
@use "property";


// Modular scale
// ==========================================================================
// Responsive spacing items apart with an old browser fallback
// This is a responsive spacer

@mixin ms(
  $property,
  $amount: 0,
  $multiplier: 1,
  $subtractFrom: false
) {
  & {
    // Get default value from map
    $ms-amount: map.get(modular-scale.$illusion-ms-sizes, $amount);
    // Support for non default values
    @if ($ms-amount == null) {
      $ms-amount: $amount;
    }
    // Support for non default behavior
    @if ($multiplier == false) {
      $ms-amount: $amount;
    }
      // Apply multiplier if applicable
    @else if ($multiplier != 1) {
      $ms-amount: map.get(modular-scale.$illusion-ms-sizes, $amount) * $multiplier;
    }

    // Logical properties?
    @if logical.$illusion-logical-properties {
      @if ($subtractFrom) {
        @include property.property("#{$property}", calc(#{$subtractFrom} - (var(--#{vars.$illusion-css-variables-prefix}spacing) * #{$ms-amount})));
      } @else {
        @include property.property("#{$property}", calc(var(--#{vars.$illusion-css-variables-prefix}spacing) * #{$ms-amount}));
      }
    } @else {
      // Default
      @if ($subtractFrom) {
        #{$property}: calc(#{$subtractFrom} - (#{fms.ms(1, rem)} * #{$ms-amount * fallback.$illusion-fallback-amount}));
      } @else {
        #{$property}: calc(#{fms.ms(1, rem)} * #{$ms-amount * fallback.$illusion-fallback-amount});
      }
      // Fallback
      @if (fallback.$illusion-fallback == false) {
        @supports (--css: variables) {
          @if ($subtractFrom) {
            #{$property}: calc(#{$subtractFrom} - (var(--#{vars.$illusion-css-variables-prefix}spacing) * #{$ms-amount}));
          } @else {
            #{$property}: calc(var(--#{vars.$illusion-css-variables-prefix}spacing) * #{$ms-amount});
          }
        }
      }
    }
  }
}
