// Globals
@use "sass:math";
@use "sass:map";
@use "sass:list";
@use "../variables/grid";
@use "../variables/span";
@use "../variables/warnings";
@use "../functions/breakpointMap";
@use "../functions/getContainer";
@use "property";
@use "ifBreakpoint";


// Span mixin

@mixin span(
  $span: span.$illusion-span-span,
  $fromto: span.$illusion-span-fromto,
  $multiplier: span.$illusion-span-multiplier,
  $bottom: span.$illusion-span-bottom,
  $defaults: span.$illusion-span-defaults,
  $omega: span.$illusion-span-omega,
  $gutter: span.$illusion-span-gutter,
  $includeWidth: span.$illusion-span-includeWidth,
  $includeMargin: span.$illusion-span-includeMargin
) {
  & {
    // Give a warning when $multiplier is not dividable by 0.5
    @if ($multiplier % 0.5 != 0 and warnings.$illusion-display-warnings != false) {
      @warn 'The `multiplier` in the `span` mixin is designed to work best with a number dividable by 0.5';
    }

    // Get new SCSS map
    $grid-breakpoints: breakpointMap.gridBreakpoints($fromto);

    // Map when gutter is set
    @if ($gutter != false) {
      $grid-breakpoints: breakpointMap.gridBreakpoint($fromto, $gutter);
    }

    // Loop
    @each $breakpoint, $values in $grid-breakpoints {
      // Breakpoint values
      $breakpointGutter: map.get($values, gutter);
      $breakpointWidth: map.get($values, width);

      // Span values
      $spanColumns: list.nth($span, 1);
      $spanContainer: getContainer.getContainer($span);
      $spanAmount: math.div($spanContainer, $spanColumns);

      // Column values
      $columnGutter: ($spanAmount - 1) * $breakpointGutter * $multiplier;
      $columnWidth: calc((100% - #{$columnGutter}) / #{$spanAmount});
      $columnMargin: calc(#{$breakpointGutter * $multiplier});

      // Only run between starting and stopping breakpoints
      @include ifBreakpoint.ifBreakpoint($breakpointWidth) {

        // Width
        @if $includeWidth != false {
          @include property.property("width", $columnWidth);
        }

        // Left margin
        @if $includeMargin != false {
          @include property.property("margin-left", $columnMargin);
        }

        // Bottom margin
        @if $bottom != false {
          @include property.property("margin-bottom", $columnMargin);
        }

        // Omega settings
        @if $omega != null {
          // Reset all previous NTH values and set new spacing
          @if $breakpointWidth != 0 {
            &:nth-child(n) {
              @include property.property("margin-left", $columnMargin);
              @include property.property("margin-right", 0);

              @if grid.$illusion-grid-type == float {
                clear: none;
              }
            }
          }

          // sub-pixel rounding fix
          &:nth-child(#{$omega}n) {
            @include property.property("margin-right", -1px);
          }

          // Clear the item after omega
          &:nth-child(#{$omega}n+1) {
            @include property.property("margin-left", 0);

            @if grid.$illusion-grid-type == float {
              @include property.property("clear", left);
            }
          }
        }

        @if $defaults == true {

          // Float item
          @if grid.$illusion-grid-type == float {
            @include property.property("float", left);
          }

          // No margin for first child
          &:first-child {
            @include property.property("margin-left", 0);
          }

          // sub-pixel rounding fix
          @if $omega == null {
            &:last-child {
              @include property.property("margin-right", -1px);
            }
          }

          // Set to true so it only runs once
          $defaults: false;
        }
      }
    }
  }
}
