// Globals
@use "sass:map";
@use "sass:list";
@use "../variables/spacing";
@use "../variables/warnings";
@use "../variables/logical-properties" as logical;
@use "../functions/breakpointMap";
@use "../functions/getSides";
@use "ifBreakpoint";
@use "property";

// Spacing
//
// Responsive spacing that follows the grid breakpoints

@mixin spacing(
  $sides: spacing.$illusion-spacing-sides,
  $type: spacing.$illusion-spacing-type,
  $multiplier: spacing.$illusion-spacing-multiplier,
  $fromto: spacing.$illusion-spacing-fromto,
  $lastchildnone: spacing.$illusion-spacing-lastchildnone,
  $minus: spacing.$illusion-spacing-minus
) {
  & {
    // Give a warning when $multiplier is not dividable by 0.5
    @if ($multiplier % 0.5 != 0 and warnings.$illusion-display-warnings != false) {
      @warn 'The `multiplier` in the `spacing` mixin is designed to work best with a number dividable by 0.5';
    }

    @if ($type != padding and $type != margin and warnings.$illusion-display-warnings != false) {
      @warn 'It might be best to use the spacing function instead of the spacing mixin for what you are trying to do.';
    }

    // Get new SCSS map
    $grid-breakpoints: breakpointMap.gridBreakpoints($fromto);

    // Loop
    @each $breakpoint, $values in $grid-breakpoints {

      //Get values
      $spacing: map.get($values, gutter);
      $width: map.get($values, width);
      $side: list.nth($sides, 1);
      $skip: getSides.getSides($sides);
      $spacing: map.get($values, gutter) * $multiplier;
      $width: map.get($values, width);
      $subtract: $minus;

      // Only run between starting and stopping breakpoints
      @include ifBreakpoint.ifBreakpoint($width) {

        // Top
        @if ($side == all or $side == vertical or $side == top) and $skip != top {
          @if ($side == all or $side == vertical) and ($skip != bottom) {
            $subtract: $minus * 0.5;
          }
          @if logical.$illusion-logical-properties {
            @include property.property("#{$type}-top", $spacing - $subtract);
          } @else {
            #{$type}-top: $spacing - $subtract;
          }

          @if $lastchildnone != false {
            &:last-child {
              @if logical.$illusion-logical-properties {
                @include property.property("#{$type}-top", 0);
              } @else {
                #{$type}-top: 0;
              }
            }
          }
        }

        // Right
        @if ($side == all or $side == horizontal or $side == right) and $skip != right {
          @if ($side == all or $side == horizontal) and ($skip != left) {
            $subtract: $minus * 0.5;
          }
          @if logical.$illusion-logical-properties {
            @include property.property("#{$type}-right", $spacing - $subtract);
          } @else {
            #{$type}-right: $spacing - $subtract;
          }

          @if $lastchildnone != false {
            &:last-child {
              @if logical.$illusion-logical-properties {
                @include property.property("#{$type}-right", 0);
              } @else {
                #{$type}-right: 0;
              }
            }
          }
        }

        // Bottom
        @if ($side == all or $side == vertical or $side == bottom) and $skip != bottom {
          @if ($side == all or $side == vertical) and ($skip != top) {
            $subtract: $minus * 0.5;
          }
          @if logical.$illusion-logical-properties {
            @include property.property("#{$type}-bottom", $spacing - $subtract);
          } @else {
            #{$type}-bottom: $spacing - $subtract;
          }

          @if $lastchildnone != false {
            &:last-child {
              @if logical.$illusion-logical-properties {
                @include property.property("#{$type}-bottom", 0);
              } @else {
                #{$type}-bottom: 0;
              }
            }
          }
        }

        // Left
        @if ($side == all or $side == horizontal or $side == left) and $skip != left {
          @if ($side == all or $side == horizontal) and ($skip != right) {
            $subtract: $minus * 0.5;
          }
          @if logical.$illusion-logical-properties {
            @include property.property("#{$type}-left", $spacing - $subtract);
          } @else {
            #{$type}-left: $spacing - $subtract;
          }

          @if $lastchildnone != false {
            &:last-child {
              @if logical.$illusion-logical-properties {
                @include property.property("#{$type}-left", 0);
              } @else {
                #{$type}-left: 0;
              }
            }
          }
        }
      }
    }
  }
}
