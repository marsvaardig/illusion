// Globals
@use "sass:map";
@use "sass:list";
@use "../variables/collapse";
@use "../variables/warnings";
@use "../functions/breakpoint-map";
@use "if-breakpoint";
@use "property";


// Collapse
//
// Use as direct child of `@include span` element
// Make sure there's no padding on the parent element

@mixin collapse(
  $sides: collapse.$illusion-collapse-sides,
  $multiplier: collapse.$illusion-collapse-multiplier,
  $fromto: collapse.$illusion-collapse-fromto,
  $gutter: collapse.$illusion-collapse-gutter
) {
  & {
    // Give a warning when $multiplier is not dividable by 0.5
    @if ($multiplier % 0.5 != 0 and warnings.$illusion-display-warnings != false) {
      @warn 'The `multiplier` in the `collapse` mixin is designed to work best with a number dividable by 0.5';
    }

    // Get new SCSS map
    @if ($fromto != false) {
      $grid-breakpoints: breakpoint-map.grid-breakpoints($fromto);

      // Map when gutter is set
      @if ($gutter != false) {
        $grid-breakpoints: breakpoint-map.grid-breakpoint($fromto, $gutter);
      }

      // Loop
      @each $breakpoint, $values in $grid-breakpoints {

        //Get values
        $spacing: map.get($values, gutter);
        $side: list.nth($sides, 1);
        $width: map.get($values, width);

        // Only run between starting and stopping breakpoints
        @include if-breakpoint.if-breakpoint($width) {
          // Right
          @if ($side == both or $side == right) {
            @include property.property("margin-right", calc((-1 * #{$multiplier}) * #{$spacing}));
          }

          // Right
          @if ($side == both or $side == left) {
            @include property.property("margin-left", calc((-1 * #{$multiplier}) * #{$spacing}));
          }
        }
      }
    }
  }
}
