// Globals
@use "sass:map";
@use "sass:meta";
@use "sass:list";
@use "../variables/warnings";


// Function to get next map item
// returns next map item or fallback value if map, key or next item does not exist
//
// @author Simon Koch
//
// @access public
//
// @param {Map} $map - Sass list map
// @param {String} $key - List map key
// @param {String} $fallback (false) - Fallback value if map, key or next item does not exist
//
// @example scss - Usage
// $map: (
// 	a: 100px,
// 	b: 200px
// );
//
// .foo {
// 	width: mapGetNext($map, a);
// }
//
// .bar {
//	width: mapGetNext($map, b, auto);
// }
//
// @example css - CSS output
// .foo {
// 	width: 200px;
// }
//
// .bar {
// 	width: auto;
// }
//
// https://gist.github.com/agorilla/9df052eb1e15d8aea446

@function mapGetNext($map, $key, $fallback: false) {

  // Check if map is valid
  @if meta.type-of($map) == map {

    // Check if key exists in map
    @if map.has-key($map, $key) {

      // Init index counter variable
      $i: 0;

      // Init key index
      $key-index: false;

      // Traverse map for key
      @each $map-key, $map-value in $map {
        // Update index
        $i: $i + 1;

        // If map key found, set key index
        @if $map-key == $key {
          $key-index: $i;
        }

        // If next index return next value
        @if $i == $key-index + 1 {
          @return $map-key;
        }

        // If last entry return false
        @if $i == list.length($map) {
          @return $fallback;
        }
      }

      @if (warnings.$illusion-display-warnings != false) {
        @warn 'No next map item for key #{$key}';
      }
      @return $fallback;
    }

    @if (warnings.$illusion-display-warnings != false) {
      @warn 'No valid key #{$key} in map';
    }
    @return $fallback;
  }

  @if (warnings.$illusion-display-warnings != false) {
    @warn 'No valid map';
  }
  @return $fallback;
}
